const byte logo[] PROGMEM = {
    64,30,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
    B00000000,B00000000,B01101100,B00000000,B00000000,B00000000,B00000000,B00000000,
    B00111111,B11111111,B10010011,B11111111,B11111000,B00000000,B01111100,B00000000,
    B00111111,B11111111,B10010011,B11111111,B11111000,B00000001,B11111111,B00000000,
    B00000000,B00000000,B01101100,B00000000,B00000000,B00000011,B10000011,B10000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000111,B00000001,B11000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00001100,B00000000,B01100000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00000000,B00110000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00011000,B00000000,B00110000,
    B00000100,B00001000,B00010000,B00100000,B01000000,B00110000,B00000000,B00011000,
    B00001110,B00011100,B00111000,B01110000,B11100000,B00110000,B00000000,B00011000,
    B00011011,B00110110,B01101100,B11011001,B10110000,B00111111,B11111111,B11111000,
    B00110001,B11100011,B11000111,B10001111,B00011000,B00111111,B11111111,B11111000,
    B00100000,B11000001,B10000011,B00000110,B00001000,B00000000,B00000000,B00000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
    B00000010,B00000000,B00000000,B10000000,B00000000,B00010000,B00000000,B00000000,
    B00000111,B00000000,B00000001,B11000000,B00000000,B00111000,B00000000,B00000000,
    B00000111,B00000000,B00000001,B11000000,B00000000,B00111000,B00000000,B00000000,
    B00001111,B10000000,B00000011,B11100000,B00000000,B01111100,B00000000,B00000000,
    B00000111,B00000000,B00000001,B11000000,B00000000,B00111000,B00000000,B00000000,
    B00000111,B00011111,B11110001,B11000011,B11111110,B00111000,B11111111,B10000000,
    B00000111,B00001111,B11100001,B11000001,B11111100,B00111000,B01111111,B00000000,
    B00001111,B10000111,B11000011,B11100000,B11111000,B01111100,B00111110,B00000000,
    B00001111,B10000111,B11000011,B11100000,B11111000,B01111100,B00111110,B00000000,
    B00001111,B10000111,B11000011,B11100000,B11111000,B01111100,B00111110,B00000000,
    B00001111,B10001111,B11100011,B11100001,B11111100,B01111100,B01111111,B00000000,
    B00011111,B11011111,B11110111,B11110011,B11111110,B11111110,B11111111,B10000000,
    B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,B00000000,
};

void drawBitmap(int8_t dst_x, int8_t dst_y, int8_t dst_w, int8_t dst_h, int8_t src_x, int8_t src_y, const uint8_t *bitmap) {
  int8_t src_w = pgm_read_byte(bitmap);
  //int8_t src_h = pgm_read_byte(bitmap + 1);
  bitmap += 2;
  int8_t byteWidth = (src_w + 7) / 8;
  for (int8_t dy = 0, j = src_y; dy < dst_h; dy++, j++)
    for (int8_t dx = 0, i = src_x; dx < dst_w; dx++, i++)
    {
      if (pgm_read_byte(bitmap + (j * byteWidth + i / 8)) & (B10000000 >> (i % 8)))
        gb.display.drawPixel(dst_x + dx, dst_y + dy);
    }
}

