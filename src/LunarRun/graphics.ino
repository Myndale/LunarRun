const byte logo[] PROGMEM = {
  64, 30,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC0,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0xA0,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x50,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x03,0x7C,0x00,0x00,0x00,0x00,0x05,0x00,0x02,0xE2,0x00,0x00,0x00,0x00,0x0A,0x00,0x03,0x81,0x00,0x00,0xA0,0x00,
  0x14,0x00,0x02,0x0A,0x80,0x01,0x50,0x00,0x08,0x00,0x03,0x55,0x40,0x00,0xA8,0x00,0x14,0x00,0x06,0xAF,0xE0,0x00,0x50,0x00,0x08,0x00,0x05,0x7F,0xE0,0x00,0x28,0x00,
  0x04,0x00,0x07,0xFF,0xE0,0x00,0x14,0x00,0x02,0x00,0x07,0xF1,0xC0,0x80,0x0A,0x00,0x05,0x00,0x07,0xE4,0x81,0x40,0x15,0x00,0x02,0x80,0x03,0xCE,0x42,0xA0,0x0A,0x80,
  0x05,0x40,0x00,0x4E,0x35,0x50,0x15,0x00,0x02,0xA0,0x08,0x4F,0x3A,0xA8,0x2A,0x80,0x05,0x50,0x14,0x47,0x3D,0x55,0x55,0x00,0x02,0xA8,0x2A,0x43,0x3E,0xAA,0xAA,0x00,
  0x01,0x55,0x55,0xE1,0x3D,0x5F,0x54,0x00,0x00,0xAA,0xAB,0xF0,0x3F,0xBF,0xAA,0x00,0x01,0x55,0x57,0xF8,0x3F,0xFF,0xD5,0x00,0x00,0xAB,0xEB,0xFC,0x3F,0xFF,0xEA,0xA8,
  0x01,0x57,0xF7,0xFE,0x3F,0xFF,0xD5,0x54,0x02,0xAF,0xFB,0xFF,0x3F,0xFF,0xEA,0xAA,0x55,0x5F,0xF7,0xFF,0xBF,0xFF,0xF7,0xD5,0xAA,0xAF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEA,
  0x55,0x7F,0xFF,0xFF,0xFF,0xFF,0xFF,0xF5,0xAA,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xEA
};

void drawBitmap(int8_t dst_x, int8_t dst_y, int8_t dst_w, int8_t dst_h, int8_t src_x, int8_t src_y, const uint8_t *bitmap) {
  int8_t src_w = pgm_read_byte(bitmap);
  //int8_t src_h = pgm_read_byte(bitmap + 1);
  bitmap += 2;
  int8_t byteWidth = (src_w + 7) / 8;
  for (int8_t dy = 0, j = src_y; dy < dst_h; dy++, j++)
    for (int8_t dx = 0, i = src_x; dx < dst_w; dx++, i++)
    {
      if (pgm_read_byte(bitmap + (j * byteWidth + i / 8)) & (B10000000 >> (i % 8)))
        gb.display.drawPixel(dst_x + dx, dst_y + dy);
    }
}

